{
  "$type": "Sq1.Core.StrategyBase.Strategy, Sq1.Core",
  "Guid": "4c7274f7-ab63-498b-b448-b7bc09f7263b",
  "Name": "EnterEveryBar",
  "ScriptSourceCode": "using System;\r\nusing System.Diagnostics;\r\nusing System.Drawing;\r\n\r\nusing Sq1.Core;\r\nusing Sq1.Core.DataTypes;\r\nusing Sq1.Core.Execution;\r\nusing Sq1.Core.Indicators;\r\nusing Sq1.Core.StrategyBase;\r\nusing Sq1.Core.Streaming;\r\n\r\nnamespace Sq1.Strategies.Demo {\r\n\tpublic class EnterEveryBar : Script {\r\n\t\t// if an indicator is NULL (isn't initialized in this.ctor()) you'll see INDICATOR_DECLARED_BUT_NOT_CREATED+ASSIGNED_IN_CONSTRUCTOR in ExceptionsForm \r\n\t\tpublic IndicatorMovingAverageSimple MAfast;\r\n\r\n\t\tpublic EnterEveryBar() {\r\n\t\t\tMAfast = new IndicatorMovingAverageSimple();\r\n\t\t\tMAfast.ParamPeriod = new IndicatorParameter(\"Period\", 15, 10, 20, 3);\r\n\t\t\tMAfast.LineWidth = 2;\r\n\t\t\tMAfast.LineColor = Color.LightSeaGreen;\r\n\t\t\tbase.ScriptParameterCreateRegister(1, \"test\", 0, 0, 6, 1);\r\n\t\t\tbase.ScriptParameterCreateRegister(2, \"verbose\", 0, 0, 1, 1, \"set to 0 if you don't want log() to spam your Exceptions window\");\r\n\t\t}\r\n\t\t\r\n\t\tprotected void log(string msg) {\r\n\t\t\tif (this.Script[2].ValueCurrent == 0.0) {\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\tstring whereIam = \"\\n\\r\\n\\rEnterEveryBar.cs now=[\" + DateTime.Now.ToString(\"ddd dd-MMM-yyyy HH:mm:ss.fff\") + \"]\";\r\n\t\t\t//this.Executor.PopupException(msg + whereIam);\r\n\t\t}\r\n\t\tpublic override void InitializeBacktest() {\r\n\t\t\t//Debugger.Break();\r\n\t\t\t//this.PadBars(0);\r\n\t\t\tif (base.Strategy == null) {\r\n\t\t\t\tlog(\"CANT_SET_EXCEPTIONS_LIMIT: base.Strategy == null\");\r\n\t\t\t\tDebugger.Break();\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\tbase.Strategy.ExceptionsLimitToAbortBacktest = 10;\r\n\t\t\t//this.MAslow.NotOnChartSymbol = \"SANDP-FUT\";\r\n\t\t\t//this.MAslow.NotOnChartBarScaleInterval = new BarScaleInterval(BarScale.Hour, 1);\r\n\t\t\t//this.MAslow.NotOnChartBarScaleInterval = new BarScaleInterval(BarScale.Minute, 15);\r\n\t\t\t//this.MAslow.LineWidth = 2;\r\n\t\t\t//this.MAslow.LineColor = System.Drawing.Color.LightCoral;\r\n\t\t\t\r\n\t\t\ttestChartLabelDrawOnNextLineModify();\r\n\t\t}\r\n\t\tvoid testChartLabelDrawOnNextLineModify() {\r\n\t\t\tstring parameterNameToLookup = \"test\";\r\n\t\t\tif (base.ScriptParametersByNameInlineCopy.ContainsKey(parameterNameToLookup) == false) {\r\n\t\t\t\tstring msg = \"if you renamed parameter [\" + parameterNameToLookup + \"] please ajdust the name here as well\";\r\n\t\t\t\tAssembler.PopupException(msg);\r\n\t\t\t}\r\n\t\t\tScriptParameter param = base.ScriptParametersByNameInlineCopy[parameterNameToLookup];\r\n\t\t\tdouble paramValue = param.ValueCurrent;\r\n\t\t\t//Font font = new Font(FontFamily.GenericMonospace, 8, FontStyle.Bold);\r\n\t\t\t//base.Executor.ChartConditionalChartLabelDrawOnNextLineModify(\"labelTest\", \"test[\" + test+ \"]\", font, Color.Brown, Color.Empty);\r\n\t\t\tFont font = new Font(\"Consolas\", 8, FontStyle.Bold);\r\n\t\t\tbase.Executor.ChartConditionalChartLabelDrawOnNextLineModify(\"labelTest\", parameterNameToLookup + \"[\" + paramValue + \"]\", font, Color.Brown, Color.Beige);\r\n\t\t}\r\n\t\tpublic override void OnNewQuoteOfStreamingBarCallback(Quote quote) {\r\n\t\t\t//double slowStreaming = this.MAslow.BarClosesProxied.StreamingValue;\r\n\t\t\t//double slowStatic = this.MAslow.ClosesProxyEffective.LastStaticValue;\r\n\t\t\t//DateTime slowStaticDate = this.MAslow.ClosesProxyEffective.LastStaticDate;\r\n\r\n\t\t\tif (this.Executor.Backtester.IsBacktestingNow == false) {\r\n\t\t\t\tBar bar = quote.ParentStreamingBar;\r\n\t\t\t\tint barNo = bar.ParentBarsIndex;\r\n\t\t\t\tif (barNo == -1) return;\r\n\t\t\t\tDateTime lastStaticBarDateTime = bar.ParentBars.BarStaticLastNullUnsafe.DateTimeOpen;\r\n\t\t\t\tDateTime streamingBarDateTime = bar.DateTimeOpen;\r\n\t\t\t\tBar barNormalizedDateTimes = new Bar(bar.Symbol, bar.ScaleInterval, quote.ServerTime);\r\n\t\t\t\tDateTime thisBarDateTimeOpen = barNormalizedDateTimes.DateTimeOpen;\r\n\t\t\t\tint a = 1;\r\n\t\t\t}\r\n\t\t\t//log(\"OnNewQuoteCallback(): [\" + quote.ToString() + \"]\"); \r\n\t\t\tstring msg = \"OnNewQuoteCallback(): [\" + quote.ToString() + \"]\";\r\n\t\t\tlog(\"EnterEveryBar.cs now=[\" + DateTime.Now.ToString(\"ddd dd-MMM-yyyy HH:mm:ss.fff\" + \"]: \" + msg));\r\n\r\n\t\t\tif (quote.IntraBarSerno == 0) {\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t}\r\n\t\tpublic override void OnBarStaticLastFormedWhileStreamingBarWithOneQuoteAlreadyAppendedCallback(Bar barStaticFormed) {\r\n\t\t\t//this.testBarAnnotations(barStaticFormed);\r\n\t\t\t\r\n\t\t\tBar barStreaming = base.Bars.BarStreaming;\r\n\t\t\tif (this.Executor.Backtester.IsBacktestingNow == false) {\r\n\t\t\t\t//Debugger.Break();\r\n\t\t\t}\r\n\t\t\tif (barStaticFormed.ParentBarsIndex <= 2) return;\r\n\t\t\tif (barStaticFormed.IsBarStreaming) {\r\n\t\t\t\tstring msg = \"SHOULD_NEVER_HAPPEN triggered@barStaticFormed.IsBarStreaming[\" + barStaticFormed + \"] while Streaming[\" + barStreaming + \"]\";\r\n\t\t\t\tDebugger.Break();\r\n\t\t\t}\r\n\r\n\t\t\tPosition lastPos = base.LastPosition;\r\n\t\t\tbool isLastPositionNotClosedYet = base.IsLastPositionNotClosedYet;\r\n\t\t\tif (isLastPositionNotClosedYet) {\r\n\t\t\t\tif (lastPos.EntryFilledBarIndex > barStaticFormed.ParentBarsIndex) {\r\n\t\t\t\t\tstring msg1 = \"prev bar you placed on streaming, now that streaming is static and positionEntry is still in the future but you have it filled?...\";\r\n\t\t\t\t\tDebugger.Break();\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (lastPos.ExitAlert != null) {\r\n\t\t\t\t\tstring msg1 = \"you want to avoid POSITION_ALREADY_HAS_AN_EXIT_ALERT_REPLACE_INSTEAD_OF_ADDING_SECOND\"\r\n\t\t\t\t\t\t+ \" ExitAtMarket by throwing [can't have two closing alerts for one positionExit] Strategy[\" + this.Strategy.ToString() + \"]\";\r\n\t\t\t\t\tDebugger.Break();\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (barStaticFormed.ParentBarsIndex == 163) {\r\n\t\t\t\t\tDebugger.Break();\r\n\t\t\t\t\tStreamingDataSnapshot streaming = this.Executor.DataSource.StreamingAdapter.StreamingDataSnapshot;\r\n\t\t\t\t\tQuote lastQuote = streaming.LastQuoteGetForSymbol(barStaticFormed.Symbol);\r\n\t\t\t\t\tdouble priceForMarketOrder = streaming.LastQuoteGetPriceForMarketOrder(barStaticFormed.Symbol);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tstring msg = \"ExitAtMarket@\" + barStaticFormed.ParentBarsIdent;\r\n\t\t\t\tAlert exitPlaced = ExitAtMarket(barStreaming, lastPos, msg);\r\n\t\t\t\tlog(\"Execute(): \" + msg);\r\n\t\t\t}\r\n\r\n\t\t\tExecutionDataSnapshot snap = base.Executor.ExecutionDataSnapshot;\r\n\t\t\tint alertsPendingCount = snap.AlertsPending.Count;\r\n\t\t\tint positionsOpenNowCount = snap.PositionsOpenNow.Count;\r\n\r\n\t\t\tbool hasAlertsPendingOrPositionsOpenNow = base.HasAlertsPendingOrPositionsOpenNow;\r\n\t\t\tif (hasAlertsPendingOrPositionsOpenNow) {\r\n\t\t\t\tif (alertsPendingCount > 0) {\r\n\t\t\t\t\tif (snap.AlertsPending[0] == lastPos.EntryAlert) {\r\n\t\t\t\t\t\tstring msg = \"EXPECTED: I don't have open positions but I have an unfilled alert from lastPosition.EntryAlert=alertsPending[0]\";\r\n\t\t\t\t\t} else if (snap.AlertsPending[0] == lastPos.ExitAlert) {\r\n\t\t\t\t\t\tstring msg = \"EXPECTED: I have and open lastPosition with .ExitAlert=alertsPending[0]\";\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tstring msg = \"UNEXPECTED: pending alert doesn't relate to lastPosition; who is here?\";\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tif (positionsOpenNowCount > 1) {\r\n\t\t\t\t\tstring msg = \"EXPECTED: I got multiple positions[\" + positionsOpenNowCount + \"]\";\r\n\t\t\t\t\tif (snap.PositionsOpenNow[0] == lastPos) {\r\n\t\t\t\t\t\tmsg += \"50/50: positionsMaster.Last = positionsOpenNow.First\";\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\tif (barStaticFormed.ParentBarsIndex == 30) {\r\n\t\t\t\tDebugger.Break();\r\n\t\t\t\tStreamingDataSnapshot streaming = this.Executor.DataSource.StreamingAdapter.StreamingDataSnapshot;\r\n\t\t\t\tQuote lastQuote = streaming.LastQuoteGetForSymbol(barStaticFormed.Symbol);\r\n\t\t\t\tdouble priceForMarketOrder = streaming.LastQuoteGetPriceForMarketOrder(barStaticFormed.Symbol);\r\n\t\t\t}\r\n\r\n\r\n\t\t\tif (barStaticFormed.Close > barStaticFormed.Open) {\r\n\t\t\t\tstring msg = \"BuyAtMarket@\" + barStaticFormed.ParentBarsIdent;\r\n\t\t\t\tPosition buyPlaced = BuyAtMarket(barStreaming, msg);\r\n\t\t\t\t//Debugger.Break();\r\n\t\t\t} else {\r\n\t\t\t\tstring msg = \"ShortAtMarket@\" + barStaticFormed.ParentBarsIdent;\r\n\t\t\t\tPosition shortPlaced = ShortAtMarket(barStreaming, msg);\r\n\t\t\t\t//Debugger.Break();\r\n\t\t\t}\r\n\t\t\t//base.Executor.ChartConditionalLineDrawModify(...);\r\n\t\t}\r\n\t\tpublic override void OnAlertFilledCallback(Alert alertFilled) {\r\n\t\t\tif (alertFilled.FilledBarIndex == 12) {\r\n\t\t\t\t//Debugger.Break();\r\n\t\t\t}\r\n\t\t}\r\n\t\tpublic override void OnAlertKilledCallback(Alert alertKilled) {\r\n\t\t\tDebugger.Break();\r\n\t\t}\r\n\t\tpublic override void OnAlertNotSubmittedCallback(Alert alertNotSubmitted, int barNotSubmittedRelno) {\r\n\t\t\tDebugger.Break();\r\n\t\t}\r\n\t\tpublic override void OnPositionOpenedCallback(Position positionOpened) {\r\n\t\t\tif (positionOpened.EntryFilledBarIndex == 37) {\r\n\t\t\t\tDebugger.Break();\r\n\t\t\t}\r\n\t\t}\r\n\t\tpublic override void OnPositionOpenedPrototypeSlTpPlacedCallback(Position positionOpenedByPrototype) {\r\n\t\t\tDebugger.Break();\r\n\t\t}\r\n\t\tpublic override void OnPositionClosedCallback(Position positionClosed) {\r\n\t\t\tif (positionClosed.EntryFilledBarIndex == 37) {\r\n\t\t\t\tDebugger.Break();\r\n\t\t\t}\r\n\t\t}\r\n\t\tvoid testBarAnnotations(Bar barStaticFormed) {\r\n\t\t\tint barIndex = barStaticFormed.ParentBarsIndex;\r\n\t\t\tstring labelText = barStaticFormed.DateTimeOpen.ToString(\"HH:mm\");\r\n\t\t\tlabelText += \" \" + barStaticFormed.BarIndexAfterMidnightReceived + \"/\";\r\n\t\t\tlabelText += barStaticFormed.BarIndexExpectedSinceTodayMarketOpen + \":\" + barStaticFormed.BarIndexExpectedMarketClosesTodaySinceMarketOpen;\r\n\t\t\tFont font = new Font(\"Consolas\", 7);\r\n\t\t\t//bool evenAboveOddBelow = true;\r\n\t\t\tbool evenAboveOddBelow = (barStaticFormed.ParentBarsIndex % 2) == 0;\r\n\t\t\tbase.Executor.ChartConditionalBarAnnotationDrawModify(\r\n\t\t\t\tbarIndex, \"ann\" + barIndex, labelText, font, Color.ForestGreen, Color.Empty, evenAboveOddBelow);\r\n\t\t\t// checking labels stacking next upon (underneath) the previous\r\n\t\t\tbase.Executor.ChartConditionalBarAnnotationDrawModify(\r\n\t\t\t\tbarIndex, \"ann2\" + barIndex, labelText, font, Color.ForestGreen, Color.LightGray, evenAboveOddBelow);\r\n\t\t}\r\n\t}\r\n}",
  "DotNetReferences": "",
  "HasChartOnly": false
}