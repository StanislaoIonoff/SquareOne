{
  "$type": "Sq1.Core.StrategyBase.Strategy, Sq1.Core",
  "Guid": "7725f2be-42e2-495f-8d71-5ecd0c305d29",
  "Name": "TwoMAs",
  "ScriptSourceCode": "using System;\r\nusing System.Diagnostics;\r\nusing System.Drawing;\r\n\r\nusing Sq1.Core;\r\nusing Sq1.Core.Charting.OnChart;\r\nusing Sq1.Core.DataTypes;\r\nusing Sq1.Core.Execution;\r\nusing Sq1.Core.Indicators;\r\nusing Sq1.Core.StrategyBase;\r\n\r\nnamespace Sq1.Strategies.Worldexplorer {\r\n\tpublic class TwoMAs : Script {\r\n\t\t// if an indicator is NULL (isn't initialized in this.ctor()) you'll see INDICATOR_DECLARED_BUT_NOT_CREATED+ASSIGNED_IN_CONSTRUCTOR in ExceptionsForm \r\n\t\tpublic IndicatorMovingAverageSimple MAfast;\r\n\t\tpublic IndicatorMovingAverageSimple MAslow;\r\n\r\n\t\tpublic TwoMAs() {\r\n\t\t\tMAfast = new IndicatorMovingAverageSimple();\r\n\t\t\tMAfast.ParamPeriod = new IndicatorParameter(\"Period\", 22, 11, 33, 3);\t//, 11);\r\n\t\t\tMAfast.LineColor = System.Drawing.Color.LightSeaGreen;\r\n\r\n\t\t\tMAslow = new IndicatorMovingAverageSimple();\r\n\t\t\tMAslow.ParamPeriod = new IndicatorParameter(\"Period\", 15, 10, 20, 2);\t//, 5);\r\n\t\t\tMAslow.LineColor = System.Drawing.Color.LightCoral;\r\n\t\t}\r\n\t\t\r\n\t\tpublic int PeriodLargestAmongMAs { get {\r\n\t\t\t\tint ret = (int)this.MAfast.ParamPeriod.ValueCurrent;\r\n\t\t\t\tif (ret > (int)this.MAslow.ParamPeriod.ValueCurrent) ret = (int)this.MAslow.ParamPeriod.ValueCurrent; \r\n\t\t\t\treturn ret;\r\n\t\t\t} }\r\n\r\n\t\tpublic override void InitializeBacktest() {\r\n\t\t}\r\n\t\tpublic override void OnNewQuoteOfStreamingBarCallback(Quote quote) {\r\n\t\t}\r\n\t\tpublic override void OnBarStaticLastFormedWhileStreamingBarWithOneQuoteAlreadyAppendedCallback(Bar barStaticFormed) {\r\n\t\t\t//this.drawLinesSample(barStaticFormed);\r\n\t\t\t//this.testBarBackground(barStaticFormed);\r\n\t\t\t//this.testBarAnnotations(barStaticFormed);\r\n\t\t\t\r\n\t\t\tBar barStreaming = barStaticFormed.ParentBars.BarStreaming;\r\n\t\t\tif (barStaticFormed.ParentBarsIndex <= this.PeriodLargestAmongMAs) return;\r\n\r\n\t\t\tdouble maSlowThis = this.MAslow.OwnValuesCalculated[barStaticFormed.ParentBarsIndex];\r\n\t\t\tdouble maSlowPrev = this.MAslow.OwnValuesCalculated[barStaticFormed.ParentBarsIndex - 1];\r\n\r\n\t\t\tdouble maFastThis = this.MAfast.OwnValuesCalculated[barStaticFormed.ParentBarsIndex];\r\n\t\t\tdouble maFastPrev = this.MAfast.OwnValuesCalculated[barStaticFormed.ParentBarsIndex - 1];\r\n\r\n\t\t\tbool fastCrossedUp = false;\r\n\t\t\tif (maFastThis > maSlowThis && maFastPrev < maSlowPrev) fastCrossedUp = true; \r\n\t\t\t\t\r\n\t\t\tbool fastCrossedDown = false;\r\n\t\t\tif (maFastThis < maSlowThis && maFastPrev > maSlowPrev) fastCrossedDown = true;\r\n\r\n\t\t\tif (fastCrossedUp && fastCrossedDown) {\r\n\t\t\t\tstring msg = \"TWO_CROSSINGS_SHOULD_NEVER_HAPPEN_SIMULTANEOUSLY\";\r\n\t\t\t\tAssembler.PopupException(msg);\r\n\t\t\t\tDebugger.Break();\r\n\t\t\t}\r\n\t\t\tbool crossed = fastCrossedUp || fastCrossedDown;\r\n\t\t\t\t\r\n\t\t\tPosition lastPos = base.LastPosition;\r\n\t\t\tbool isLastPositionNotClosedYet = base.IsLastPositionNotClosedYet;\r\n\t\t\tif (isLastPositionNotClosedYet && crossed) {\r\n\t\t\t\tstring msg = \"ExitAtMarket@\" + barStaticFormed.ParentBarsIdent;\r\n\t\t\t\tAlert exitPlaced = ExitAtMarket(barStreaming, lastPos, msg);\r\n\t\t\t}\r\n\r\n\t\t\tif (fastCrossedUp) {\r\n\t\t\t\tstring msg = \"BuyAtMarket@\" + barStaticFormed.ParentBarsIdent;\r\n\t\t\t\tPosition buyPlaced = BuyAtMarket(barStreaming, msg);\r\n\t\t\t}\r\n\t\t\tif (fastCrossedDown) {\r\n\t\t\t\tstring msg = \"ShortAtMarket@\" + barStaticFormed.ParentBarsIdent;\r\n\t\t\t\tPosition shortPlaced = ShortAtMarket(barStreaming, msg);\r\n\t\t\t}\r\n\t\t}\r\n\t\tpublic override void OnAlertFilledCallback(Alert alertFilled) {\r\n\t\t}\r\n\t\tpublic override void OnAlertKilledCallback(Alert alertKilled) {\r\n\t\t}\r\n\t\tpublic override void OnAlertNotSubmittedCallback(Alert alertNotSubmitted, int barNotSubmittedRelno) {\r\n\t\t}\r\n\t\tpublic override void OnPositionOpenedCallback(Position positionOpened) {\r\n\t\t}\r\n\t\tpublic override void OnPositionOpenedPrototypeSlTpPlacedCallback(Position positionOpenedByPrototype) {\r\n\t\t}\r\n\t\tpublic override void OnPositionClosedCallback(Position positionClosed) {\r\n\t\t}\r\n\r\n\t\tvoid drawLinesSample(Bar barStaticFormed) {\r\n\t\t\tBar barFirstForCurrentTradingDay = barStaticFormed.BarMarketOpenedTodayScanBackwardIgnoringMarketInfo;\r\n\t\t\tdouble dayOpenedAtPrice = barFirstForCurrentTradingDay.Open;\r\n\t\t\t\r\n\t\t\t// one line is drawn across one day regardless of timeframe: just the date is enough to \"address\" the line \r\n\t\t\tstring lineId = barFirstForCurrentTradingDay.DateTimeOpen.ToString(\"yyyy-MMM-dd\");\r\n\t\t\t//Debugger.Break();\r\n\t\t\tbase.Executor.ChartConditionalLineDrawModify(lineId,\r\n\t\t\t\tbarFirstForCurrentTradingDay.ParentBarsIndex, dayOpenedAtPrice,\r\n\t\t\t\tbarStaticFormed.ParentBarsIndex, dayOpenedAtPrice,\r\n\t\t\t\tColor.Blue, 1);\r\n\r\n\t\t\t\r\n\t\t\tdouble upperLimit = dayOpenedAtPrice + dayOpenedAtPrice * 0.005;\t//143.200 + 716 = 143.916 - most likely visible on the chart, not beoynd\r\n\t\t\tdouble lowerLimit = dayOpenedAtPrice - dayOpenedAtPrice * 0.005;\r\n\t\t\t\r\n\t\t\tbase.ChartConditionalLineDrawModify(lineId + \"_red\",\r\n\t\t\t\tbarFirstForCurrentTradingDay.ParentBarsIndex, upperLimit,\r\n\t\t\t\tbarStaticFormed.ParentBarsIndex, upperLimit,\r\n\t\t\t\tColor.Red, 2);\r\n\t\t\tbase.ChartConditionalLineDrawModify(lineId + \"_green\",\r\n\t\t\t\tbarFirstForCurrentTradingDay.ParentBarsIndex, lowerLimit,\r\n\t\t\t\tbarStaticFormed.ParentBarsIndex, lowerLimit,\r\n\t\t\t\tColor.Green, 2);\r\n\t\t\t\r\n\t\t\t\r\n\t\t\tif (barStaticFormed == barFirstForCurrentTradingDay) {\r\n\t\t\t\tOnChartObjectOperationStatus status = base.Executor.ChartConditionalLineDrawModify(lineId + \"_brown\",\r\n\t\t\t\t\tbarStaticFormed.ParentBarsIndex, lowerLimit,\r\n\t\t\t\t\tbarStaticFormed.ParentBarsIndex, upperLimit,\r\n\t\t\t\t\tColor.Brown, 3);\r\n\t\t\t\tif (status != OnChartObjectOperationStatus.OnChartObjectJustCreated) {\r\n\t\t\t\t\tDebugger.Break();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tif (base.Bars.Count == base.Executor.Backtester.BarsOriginal.Count) {\r\n\t\t\t\tbase.ChartConditionalLineDrawModify(\"acrossAllBars\",\r\n\t\t\t\t\t0, base.Bars.BarStaticFirstNullUnsafe.Open,\r\n\t\t\t\t\tbase.Bars.BarStaticLastNullUnsafe.ParentBarsIndex, base.Bars.BarStaticLastNullUnsafe.Open,\r\n\t\t\t\t\tColor.Goldenrod, 1);\r\n\t\t\t}\r\n\t\t}\r\n\t\tvoid testBarBackground(Bar barStaticFormed) {\r\n\t\t\tColor bg = (barStaticFormed.Open > barStaticFormed.Close) ? Color.LightGreen : Color.LightSalmon;\r\n\t\t\tbase.ChartConditionalBarBackgroundSet(barStaticFormed.ParentBarsIndex, bg);\r\n\t\t}\r\n\t\tvoid testBarAnnotations(Bar barStaticFormed) {\r\n\t\t\tint barIndex = barStaticFormed.ParentBarsIndex;\r\n\t\t\tstring labelText = barStaticFormed.DateTimeOpen.ToString(\"HH:mm\");\r\n\t\t\tlabelText += \" \" + barStaticFormed.BarIndexAfterMidnightReceived + \"/\";\r\n\t\t\tlabelText += barStaticFormed.BarIndexExpectedSinceTodayMarketOpen + \":\" + barStaticFormed.BarIndexExpectedMarketClosesTodaySinceMarketOpen;\r\n\t\t\tFont font = new Font(\"Arial\", 6);\r\n\t\t\tbool evenAboveOddBelow = (barStaticFormed.ParentBarsIndex % 2) == 0;\r\n\t\t\tbase.Executor.ChartConditionalBarAnnotationDrawModify(\r\n\t\t\t\tbarIndex, \"ann\" + barIndex, labelText, font, Color.ForestGreen, Color.Empty, evenAboveOddBelow);\r\n\t\t}\r\n\r\n\t}\r\n}\r\n",
  "DotNetReferences": null,
  "DllPathIfNoSourceCode": null,
  "ExceptionsLimitToAbortBacktest": 10,
  "StoredInJsonAbspath": "C:\\SquareOne\\Sq1.Gui\\bin\\Debug\\..\\..\\..\\Data-debug\\Strategies\\WellKnown\\TwoMAs.json",
  "ScriptContextCurrentName": "Net[-1018] PF[0.72] RF[0.46]",
  "ScriptContextsByName": {
    "$type": "System.Collections.Generic.Dictionary`2[[System.String, mscorlib],[Sq1.Core.StrategyBase.ContextScript, Sq1.Core]], mscorlib",
    "Default": {
      "$type": "Sq1.Core.StrategyBase.ContextScript, Sq1.Core",
      "PositionSize": {
        "$type": "Sq1.Core.Execution.PositionSize, Sq1.Core",
        "Mode": 1,
        "DollarsConstantEachTrade": 0.0,
        "SharesConstantEachTrade": 1.0
      },
      "ScriptParametersById": {
        "$type": "System.Collections.Generic.Dictionary`2[[System.Int32, mscorlib],[Sq1.Core.StrategyBase.ScriptParameter, Sq1.Core]], mscorlib"
      },
      "IndicatorParametersByName": {
        "$type": "System.Collections.Generic.Dictionary`2[[System.String, mscorlib],[System.Collections.Generic.List`1[[Sq1.Core.Indicators.IndicatorParameter, Sq1.Core]], mscorlib]], mscorlib",
        "MAslow": [
          {
            "$type": "Sq1.Core.Indicators.IndicatorParameter, Sq1.Core",
            "Name": "Period",
            "ValueMin": 10.0,
            "ValueMax": 20.0,
            "ValueIncrement": 2.0,
            "ValueCurrent": 14.0,
            "BorderShown": false,
            "NumericUpdownShown": true,
            "ValuesAsString": "14[10..20/2]"
          }
        ],
        "MAfast": [
          {
            "$type": "Sq1.Core.Indicators.IndicatorParameter, Sq1.Core",
            "Name": "Period",
            "ValueMin": 11.0,
            "ValueMax": 33.0,
            "ValueIncrement": 3.0,
            "ValueCurrent": 32.0,
            "BorderShown": false,
            "NumericUpdownShown": true,
            "ValuesAsString": "32[11..33/3]"
          }
        ]
      },
      "IsCurrent": false,
      "StrategyEmittingOrders": false,
      "ReporterShortNamesUserInvokedJSONcheck": [
        "Positions",
        "Performance"
      ],
      "BacktestOnRestart": true,
      "BacktestOnSelectorsChange": true,
      "BacktestOnDataSourceSaved": true,
      "ReportersSnapshots": {
        "$type": "System.Collections.Generic.Dictionary`2[[System.String, mscorlib],[System.Object, mscorlib]], mscorlib",
        "Positions": {
          "$type": "Sq1.Reporters.PositionsDataSnapshot, Sq1.Reporters",
          "Colorify": true,
          "PositionsOlvStateBase64": ""
        },
        "Performance": null
      },
      "ApplyCommission": false,
      "EnableSlippage": false,
      "LimitOrderSlippage": false,
      "RoundEquityLots": false,
      "RoundEquityLotsToUpperHundred": false,
      "NoDecimalRoundingForLimitStopPrice": false,
      "SlippageUnits": 1.0,
      "SlippageTicks": 1,
      "PriceLevelSizeForBonds": 0,
      "FillOutsideQuoteSpreadParanoidCheckThrow": false,
      "SpreadModelerClassName": "BacktestSpreadModelerPercentage",
      "SpreadModelerPercent": 0.005,
      "BacktestMode": 4,
      "Name": "Default",
      "Symbol": "RIM3",
      "DataSourceName": "MOCK",
      "ScaleInterval": {
        "$type": "Sq1.Core.DataTypes.BarScaleInterval, Sq1.Core",
        "Scale": 3,
        "Interval": 1,
        "IsIntraday": true,
        "AsTimeSpanInSeconds": 60,
        "AsTimeSpan": "00:01:00"
      },
      "DataRange": {
        "$type": "Sq1.Core.DataTypes.BarDataRange, Sq1.Core",
        "Range": 1,
        "DateFrom": "0001-01-01T00:00:00",
        "DateTill": "9999-12-31T23:59:59.9999999",
        "RecentBars": 500,
        "RecentTimeunits": 0
      },
      "IsStreamingTriggeringScript": false,
      "ShowRangeBar": false,
      "IsStreaming": false
    },
    "Net[-1018] PF[0.72] RF[0.46]": {
      "$type": "Sq1.Core.StrategyBase.ContextScript, Sq1.Core",
      "PositionSize": {
        "$type": "Sq1.Core.Execution.PositionSize, Sq1.Core",
        "Mode": 1,
        "DollarsConstantEachTrade": 0.0,
        "SharesConstantEachTrade": 1.0
      },
      "ScriptParametersById": {
        "$type": "System.Collections.Generic.Dictionary`2[[System.Int32, mscorlib],[Sq1.Core.StrategyBase.ScriptParameter, Sq1.Core]], mscorlib"
      },
      "IndicatorParametersByName": {
        "$type": "System.Collections.Generic.Dictionary`2[[System.String, mscorlib],[System.Collections.Generic.List`1[[Sq1.Core.Indicators.IndicatorParameter, Sq1.Core]], mscorlib]], mscorlib",
        "MAslow": [
          {
            "$type": "Sq1.Core.Indicators.IndicatorParameter, Sq1.Core",
            "Name": "Period",
            "ValueMin": 10.0,
            "ValueMax": 20.0,
            "ValueIncrement": 2.0,
            "ValueCurrent": 12.0,
            "BorderShown": false,
            "NumericUpdownShown": true,
            "ValuesAsString": "12[10..20/2]"
          }
        ],
        "MAfast": [
          {
            "$type": "Sq1.Core.Indicators.IndicatorParameter, Sq1.Core",
            "Name": "Period",
            "ValueMin": 11.0,
            "ValueMax": 33.0,
            "ValueIncrement": 3.0,
            "ValueCurrent": 11.0,
            "BorderShown": false,
            "NumericUpdownShown": true,
            "ValuesAsString": "11[11..33/3]"
          }
        ]
      },
      "IsCurrent": true,
      "StrategyEmittingOrders": false,
      "ReporterShortNamesUserInvokedJSONcheck": [
        "Positions",
        "Performance"
      ],
      "BacktestOnRestart": false,
      "BacktestOnSelectorsChange": true,
      "BacktestOnDataSourceSaved": true,
      "ReportersSnapshots": {
        "$type": "System.Collections.Generic.Dictionary`2[[System.String, mscorlib],[System.Object, mscorlib]], mscorlib"
      },
      "ApplyCommission": false,
      "EnableSlippage": false,
      "LimitOrderSlippage": false,
      "RoundEquityLots": false,
      "RoundEquityLotsToUpperHundred": false,
      "NoDecimalRoundingForLimitStopPrice": false,
      "SlippageUnits": 1.0,
      "SlippageTicks": 1,
      "PriceLevelSizeForBonds": 0,
      "FillOutsideQuoteSpreadParanoidCheckThrow": false,
      "SpreadModelerClassName": "BacktestSpreadModelerPercentage",
      "SpreadModelerPercent": 0.005,
      "BacktestMode": 4,
      "Name": "Net[-1018] PF[0.72] RF[0.46]",
      "Symbol": "RIM3",
      "DataSourceName": "MOCK",
      "ScaleInterval": {
        "$type": "Sq1.Core.DataTypes.BarScaleInterval, Sq1.Core",
        "Scale": 3,
        "Interval": 10,
        "IsIntraday": true,
        "AsTimeSpanInSeconds": 600,
        "AsTimeSpan": "00:10:00"
      },
      "DataRange": {
        "$type": "Sq1.Core.DataTypes.BarDataRange, Sq1.Core",
        "Range": 1,
        "DateFrom": "0001-01-01T00:00:00",
        "DateTill": "9999-12-31T23:59:59.9999999",
        "RecentBars": 1500,
        "RecentTimeunits": 0
      },
      "IsStreamingTriggeringScript": false,
      "ShowRangeBar": false,
      "IsStreaming": true
    }
  },
  "LivesimBrokerSettings": {
    "$type": "Sq1.Core.Livesim.LivesimBrokerSettings, Sq1.Core",
    "DelayBeforeFillMillisMin": 0,
    "DelayBeforeFillMillisMax": 0,
    "DelayBeforeFillEnabled": true,
    "OrderRejectionHappensOncePerXordersMin": 0,
    "OrderRejectionHappensOncePerXordersMax": 0,
    "OrderRejectionEnabled": true,
    "PartialFillHappensOncePerQuoteMin": 0,
    "PartialFillHappensOncePerQuoteMax": 0,
    "PartialFillPercentageFilledMin": 0,
    "PartialFillPercentageFilledMax": 0,
    "PartialFillEnabled": true,
    "OutOfOrderFillHappensOncePerQuoteMin": 0,
    "OutOfOrderFillHappensOncePerQuoteMax": 0,
    "OutOfOrderFillDeliveredXordersLaterMin": 0,
    "OutOfOrderFillDeliveredXordersLaterMax": 0,
    "OutOfOrderFillEnabled": true,
    "PriceDeviationForMarketOrdersHappensOncePerXordersMin": 0,
    "PriceDeviationForMarketOrdersHappensOncePerXordersMax": 0,
    "PriceDeviationForMarketOrdersPercentageOfBestPriceMin": 0,
    "PriceDeviationForMarketOrdersPercentageOfBestPriceMax": 0,
    "PriceDeviationForMarketOrdersEnabled": true,
    "AdaperDisconnectHappensOncePerQuoteMin": 0,
    "AdaperDisconnectHappensOncePerQuoteMax": 0,
    "AdaperDisconnectReconnectsAfterMillisMin": 0,
    "AdaperDisconnectReconnectsAfterMillisMax": 0,
    "AdaperDisconnectEnabled": true
  },
  "LivesimStreamginSettings": {
    "$type": "Sq1.Core.Livesim.LivesimStreamingSettings, Sq1.Core",
    "DelayBetweenSerialQuotesMin": 0,
    "DelayBetweenSerialQuotesMax": 0,
    "DelayBetweenSerialQuotesEnabled": true,
    "OutOfOrderQuoteGenerationHappensOncePerQuoteMin": 0,
    "OutOfOrderQuoteGenerationHappensOncePerQuoteMax": 0,
    "OutOfOrderQuoteGenerationDelayMillisMin": 0,
    "OutOfOrderQuoteGenerationDelayMillisMax": 0,
    "OutOfOrderQuoteDeliveryEnabled": true,
    "QuoteGenerationFreezeHappensOncePerQuoteMin": 0,
    "QuoteGenerationFreezeHappensOncePerQuoteMax": 0,
    "QuoteGenerationFreezeMillisMin": 0,
    "QuoteGenerationFreezeMillisMax": 0,
    "QuoteGenerationFreezeEnabled": true,
    "AdaperDisconnectHappensOncePerQuoteMin": 0,
    "AdaperDisconnectHappensOncePerQuoteMax": 0,
    "AdaperDisconnectReconnectsAfterMillisMin": 0,
    "AdaperDisconnectReconnectsAfterMillisMax": 0,
    "AdaperDisconnectEnabled": true
  },
  "HasChartOnly": false
}